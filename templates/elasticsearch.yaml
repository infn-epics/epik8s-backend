apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: elasticsearch
  namespace: argocd
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: default
  source:
    # Using official Elastic Helm charts
    # See: https://github.com/elastic/helm-charts
    repoURL: 'https://helm.elastic.co'
    targetRevision: {{ .Values.elasticsearch.targetRevision | quote }}
    chart: elasticsearch
    helm:
      values: |
        # Elasticsearch cluster configuration
        clusterName: "elasticsearch"
        
        # Use Elasticsearch 8.15.3 image for Lucene 99 compatibility
        image: "docker.elastic.co/elasticsearch/elasticsearch"
        imageTag: "8.15.3"
        
        # Single-node deployment
        replicas: {{ .Values.elasticsearch.replicaCount }}
        minimumMasterNodes: 1
        
        # Disable TLS/SSL - use HTTP instead of HTTPS
        protocol: http
        
        # Explicitly create secrets to disable auto-generated TLS certs
        createCert: false
        secret:
          enabled: false
        
        # Set a dummy password to satisfy readiness probe
        # (not actually used since security is disabled)
        extraEnvs:
          - name: ELASTIC_PASSWORD
            value: "dummynotuser"
        
        # Disable security features completely
        esConfig:
          elasticsearch.yml: |
            xpack.security.enabled: false
            xpack.security.http.ssl.enabled: false
            xpack.security.transport.ssl.enabled: false
        
        # Readiness probe - check for yellow status (single node can't be green)
        # Disable the default probe and set a custom one
        readinessProbe:
          exec:
            command:
              - sh
              - -c
              - |
                #!/usr/bin/env bash -e
                # If the node is starting up wait for the cluster to be ready (request params: "wait_for_status=yellow&timeout=1s" )
                # Once it has started only check that the node itself is responding
                START_FILE=/tmp/.es_start_file

                # Disable nss cache to avoid filling dentry cache when calling curl
                # This is required with Elasticsearch Docker using nss < 3.52
                export NSS_SDB_USE_CACHE=no

                http () {
                  local path="${1}"
                  local args="${2}"
                  set -- -XGET -s

                  if [ "$args" != "" ]; then
                    set -- "$@" $args
                  fi

                  if [ -n "${ELASTIC_PASSWORD}" ]; then
                    set -- "$@" -u "elastic:${ELASTIC_PASSWORD}"
                  fi

                  curl --output /dev/null -k "$@" "http://127.0.0.1:9200${path}"
                }

                if [ -f "${START_FILE}" ]; then
                  echo 'Elasticsearch is already running, lets check the node is healthy'
                  HTTP_CODE=$(http "/" "-w %{http_code}")
                  RC=$?
                  if [[ ${RC} -ne 0 ]]; then
                    echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' http://127.0.0.1:9200/ failed with RC ${RC}"
                    exit ${RC}
                  fi
                  # ready if HTTP code 200, 503 is tolerable if ES version is 6.x
                  if [[ ${HTTP_CODE} == "200" ]]; then
                    exit 0
                  elif [[ ${HTTP_CODE} == "503" && "8" == "6" ]]; then
                    exit 0
                  else
                    echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' http://127.0.0.1:9200/ failed with HTTP code ${HTTP_CODE}"
                    exit 1
                  fi

                else
                  echo 'Waiting for elasticsearch cluster to become ready (request params: "wait_for_status=yellow&timeout=1s" )'
                  if http "/_cluster/health?wait_for_status=yellow&timeout=1s" "--fail" ; then
                    touch ${START_FILE}
                    exit 0
                  else
                    echo 'Cluster is not yet ready (request params: "wait_for_status=yellow&timeout=1s" )'
                    exit 1
                  fi
                fi
          failureThreshold: 3
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 3
          timeoutSeconds: 5
        
        # Resource limits
        {{- if .Values.elasticsearch.resources }}
        resources:
{{ toYaml .Values.elasticsearch.resources | indent 10 }}
        {{- end }}
        
        # Persistence
        volumeClaimTemplate:
          accessModes: [ "ReadWriteOnce" ]
          resources:
            requests:
              storage: {{ .Values.size | quote }}
        
        # Service
        service:
          type: ClusterIP
          port: 9200
        
        # Ingress for Elasticsearch
        ingress:
          enabled: true
          {{- if .Values.ingressClassName }}
          className: {{ .Values.ingressClassName | quote }}
          {{- end }}
          hosts:
            - host: elasticsearch.{{ .Values.domain }}
              paths:
                - path: /
        
  destination:
    server: https://kubernetes.default.svc
    namespace: {{ .Values.namespace | quote }}
  
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
  
---
# Kibana Application
{{- if .Values.elasticsearch.kibanaEnabled }}
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: kibana
  namespace: argocd
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: default
  source:
    # Using official Elastic Helm charts
    repoURL: 'https://helm.elastic.co'
    targetRevision: {{ .Values.elasticsearch.kibanaTargetRevision | default .Values.elasticsearch.targetRevision | quote }}
    chart: kibana
    helm:
      values: |
        # Kibana configuration
        elasticsearchHosts: "http://elasticsearch-master.{{ .Values.namespace }}.svc.cluster.local:9200"
        
        # Disable certificate verification since Elasticsearch has security disabled
        elasticsearchCertificateSecret: ""
        protocol: http
        
        # Resource limits
        resources:
          limits:
            cpu: 1
            memory: 2Gi
          requests:
            cpu: 500m
            memory: 1Gi
        
        # Service
        service:
          type: ClusterIP
          port: 5601
        
        # Ingress for Kibana
        ingress:
          enabled: true
          {{- if .Values.ingressClassName }}
          className: {{ .Values.ingressClassName | quote }}
          {{- end }}
          hosts:
            - host: kibana.{{ .Values.domain }}
              paths:
                - path: /
  
  destination:
    server: https://kubernetes.default.svc
    namespace: {{ .Values.namespace | quote }}
  
  syncPolicy:
    automated:
      prune: false
      selfHeal: false
    syncOptions:
      - CreateNamespace=true
{{- end }}
  

